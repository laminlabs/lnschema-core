from datetime import datetime as datetime
from pathlib import Path
from typing import Optional, Union

from cloudpathlib import CloudPath
from sqlmodel import Field, SQLModel

from .._timestamps import CreatedAt, UpdatedAt
from . import id as idg


class Storage(SQLModel, table=True):  # type: ignore
    """Storage locations.

    A dobject or run-associated file can be stored in any desired S3,
    GCP, Azure or local storage location. This table tracks these locations
    along with metadata.
    """

    id: str = Field(default_factory=idg.storage, primary_key=True)
    """Universal base62 ID, generated by :func:`~lnschema_core.dev.id.storage`."""
    root: str = Field(index=True)
    """Semantic identifier to the root of the storage location, like an s3 path, a local path, etc."""  # noqa
    type: Optional[str] = None
    """Local vs. s3 vs. gcp etc."""
    region: Optional[str] = None
    """Cloud storage region if applicable."""
    created_at: datetime = CreatedAt
    updated_at: Optional[datetime] = UpdatedAt


def get_name_suffix_from_filepath(filepath: Union[Path, CloudPath]):
    suffix = "".join(filepath.suffixes)
    name = filepath.name.replace(suffix, "")
    return name, suffix


# add type annotations back asap when re-organizing the module
def storage_key_from_dobject(dobj):
    return f"{dobj.id}{dobj.suffix}"


# add type annotations back asap when re-organizing the module
def filepath_from_dobject(dobj):
    from lndb_setup import settings

    storage_key = storage_key_from_dobject(dobj)
    filepath = settings.instance.storage.key_to_filepath(storage_key)
    return filepath
