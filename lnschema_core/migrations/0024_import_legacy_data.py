# Generated by Django 4.2.5 on 2023-10-11 13:34

from pathlib import Path

import lamindb_setup
import lamindb_setup as ln_setup
from django.db import migrations

import lnschema_core.models

CORE_MODELS = {
    "Dataset": False,
    "File": False,
    "Transform": False,
    "Run": True,
    "User": False,
    "Storage": False,
    "Feature": False,
    "FeatureSet": False,
    "Modality": False,
    "ULabel": False,
}


def import_registry(registry, directory):
    import pandas as pd

    table_name = registry._meta.db_table
    df = pd.read_parquet(directory / f"{table_name}.parquet")
    old_foreign_key_columns = [column for column in df.columns if column.endswith("_old")]
    for column in old_foreign_key_columns:
        df.drop(column, axis=1, inplace=True)
    df.to_sql(table_name, ln_setup.settings.instance.db, if_exists="append", index=False)


def import_db(apps, schema_editor):
    # import data from parquet files
    directory = Path(f"./lamindb_export/{ln_setup.settings.instance.identifier}/")
    if directory.exists():
        response = input(f"\n\nHave you re-initialized your instance and are ready to import data from the parquet files: {directory}? (y/n)\n")
        if response != "y":
            print("Please re-initialize your instance using the same account, instance name, schema, db & storage settings; you can see them using: lamin info")
            raise SystemExit
        for model_name in CORE_MODELS.keys():
            registry = getattr(lnschema_core.models, model_name)
            import_registry(registry, directory)
            many_to_many_names = [field.name for field in registry._meta.many_to_many]
            for many_to_many_name in many_to_many_names:
                link_orm = getattr(registry, many_to_many_name).through
                import_registry(link_orm, directory)


class Migration(migrations.Migration):
    dependencies = [
        ("lnschema_core", "0001_initial_squashed_0023"),
    ]

    operations = [migrations.RunPython(import_db, reverse_code=migrations.RunPython.noop)]


schemas = lamindb_setup.settings.instance.schema
if "bionty" in schemas:
    Migration.dependencies.append(("lnschema_bionty", "0016_export_legacy_data"))
if "lamin1" in schemas:
    Migration.dependencies.append(("lnschema_lamin1", "0012_export_legacy_data"))
